name: Comment on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  generate_summary:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Generate AI Summary # Fixed indentation here
        id: generate_summary
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Error: OPENAI_API_KEY secret is not set!"
            exit 1
          fi
          echo "Your OpenAI API key is set"
          
          # Save diff to a file first, preserving the +/- format
          gh pr diff ${{ github.event.pull_request.number }} > pr_diff.txt
          
          # Use the file contents in the API call
          RESPONSE=$(curl -s \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @- \
            https://api.openai.com/v1/chat/completions << EOF
          {
            "model": "gpt-4-turbo-preview",
            "messages": [
              {
                "role": "system",
                "content": "You are reviewing a GitHub PR diff. Lines starting with + are additions, - are deletions. Summarize the changes in a concise, professional manner. Explain how the proposed changes improve the project, or raise concerns if appropriate."
              },
              {
                "role": "user",
                "content": "$(cat pr_diff.txt)"
              }
            ],
            "temperature": 0.7
          }
          EOF
          )

          # Check if the response contains an error
          if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
            echo "Error: OpenAI API returned an error"
            echo "Error Code: $(echo "$RESPONSE" | jq -r '.error.code')"
            echo "Full Response: $RESPONSE"
            exit 1
          fi

          # Extract the summary from the response
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          if [ -z "$SUMMARY" ]; then
            echo "Error: Failed to get summary from OpenAI response"
            exit 1
          fi
          echo "Summary generated successfully: $SUMMARY"
          # Store summary in a file
          echo "$SUMMARY" > summary.txt
          echo "additional logging"

      - name: Post Summary as Comment
        run: |
           echo "Commenting on the PR..."
           gh pr comment ${{ github.event.pull_request.number }} --body "$(cat summary.txt)" || {
             echo "Failed to post comment"
             exit 1
           }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ github.token }}